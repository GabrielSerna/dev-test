//==============================================================================
// ex. 41 richiamare una proprietá tramite this
function ex41 () {
  console.log(`
  ========================================================
  ex: 01 richiamare una proprietá tramite this
  `);

  function test() {
    console.log(this.p1);
  }

  let obj1 = {
    p1 : 10,
    fn : test
  };

  let obj2 = {
    p1 : 20,
    fn : test
  };

  obj1.fn();
  obj2.fn();
}

//==============================================================================
// ex. 42 iterare un array
function ex42() {
  console.log(`
  ========================================================
  ex: 
  `);

  let accessori = ['tastiera', 'mouse', 'SSD', 'scheda video'];

  // for (i = 0; i < accessori.length; i++) {
  //   console.log(accessori[i]);
  // }

  // for (i of accessori) {
  //   console.log(i);
  // }

  // accessori.forEach((i, a) => {
  //   console.log(i, a);
  // });

  accessori.info = 'Programmare';
  console.dir(accessori.info);
}

//==============================================================================
// ex. 43 metodi degli array
function ex43() {
  console.log(`
  ========================================================
  ex: 43 
  `);

  let a = [1, 2, 3, 4, 5];

  // a.push(6);                                                                    // [1, 2, 3, 4, 5, 6]
  // a.pop();                                                                      // [1, 2, 3, 4]
  // a.shift();                                                                    // [2, 3, 4, 5]
  // a.unshift(0);                                                                 // [0, 1, 2, 3, 4, 5]
  // console.log(a.indexOf(2));                                                    // restituisce la posizione nell'indice dell'elemento passato
  
  // a.map(function (x, i, arr) {                                                  // stampa tutti gli elementi dell'array con il loro indice e tutto l'array
  //   console.log(x, i, arr);
  // });
  
  // console.log(a);
}

//==============================================================================
// ex. 44 agire su ogni elemento di un array e moltiplicarlo per 10
function ex44() {
  console.log(`
  ========================================================
  ex: 44 agire su ogni elemento di un array e moltiplicarlo per 10
  `);

  let a = [1, 2, 3, 4, 5];

  let ax10 = a.map(function(x, i, arr) {                                        // [10, 20, 30, 40, 50]
    return x * 10;
  });
  console.log(ax10);
}

//==============================================================================
// ex. 45 array di oggetti
function ex45() {
  console.log(`
  ========================================================
  ex: 45 array di oggetti
  `);

  const tv = [
    { marca: 'LG',        modello: '65 pollici', prezzo: 820 },
    { marca: 'Sony',      modello: '55 pollici', prezzo: 680 },
    { marca: 'Samsung',   modello: '50 pollici', prezzo: 780 },
    { marca: 'Sharp',     modello: '55 pollici', prezzo: 910 },
    { marca: 'Panasonic', modello: '60 pollici', prezzo: 1200 },
    { marca: 'LG',        modello: '45 pollici', prezzo: 580 }
  ];

  const prezzi = tv.map(p => p.prezzo);
  console.log(prezzi);
}

//==============================================================================
// ex. 46 creare un array con elementi di un altro array tramite FILTER
function ex46() {
  console.log(`
  ========================================================
  ex: 46 creare un array con elementi di un altro array tramite FILTER
  `);

  const numeri = [1, 12, 15, 76, 356, 3221, 5777, 8793, 9862];

  const pari = numeri.filter(elemento => elemento % 2 === 0);
  const dispari = numeri.filter(elemento => elemento % 2 === 1);
  const sopraCento = numeri.filter(elemento => elemento > 100);

  console.log(pari);
  console.log(dispari);
  console.log(sopraCento);
}

//==============================================================================
// ex. 47 concatenare diversi array in uno solo tramite .reduce - video 78
function ex47() {
  console.log(`
  ========================================================
  ex: 47 concatenare diversi array in uno solo  tramite .reduce - video 78
  `);

  let a = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
  ];

  const callback = (concatenato, elemento) => { 	                              // concatenato é un accumulatore
    return concatenato.concat(elemento);
  }

  //[].concat([1, 2, 3])                                                        // [1, 2, 3] la 1ma volta restituisce questo
  //[1, 2, 3].concat([4, 5, 6])                                                 // [1, 2, 3, 4, 5, 6] la 2da volta restituisce questo
  //[1, 2, 3, 4, 5, 6].concat([7, 8, 9])                                        // [1, 2, 3, 4, 5, 6, 7, 8, 9] la 3za volta restituisce questo

  const b = a.reduce(callback, []);                                             // prende il primo parametro e lo somma al secondo chiamato accumulatore
  console.log(b);                                                               
}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

//==============================================================================
// ex. 
function ex() {
  console.log(`
  ========================================================
  ex: 
  `);


}

